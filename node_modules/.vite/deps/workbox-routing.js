import {
  RegExpRoute,
  Route,
  Router,
  getOrCreateDefaultRouter,
  registerRoute,
  setCatchHandler
} from "./chunk-T675IE4Z.js";
import {
  finalAssertExports,
  logger
} from "./chunk-UVGC63UF.js";
import "./chunk-TWLJ45QX.js";

// node_modules/workbox-routing/NavigationRoute.js
var NavigationRoute = class extends Route {
  constructor(handler, { allowlist = [/./], denylist = [] } = {}) {
    if (true) {
      finalAssertExports.isArrayOfClass(allowlist, RegExp, {
        moduleName: "workbox-routing",
        className: "NavigationRoute",
        funcName: "constructor",
        paramName: "options.allowlist"
      });
      finalAssertExports.isArrayOfClass(denylist, RegExp, {
        moduleName: "workbox-routing",
        className: "NavigationRoute",
        funcName: "constructor",
        paramName: "options.denylist"
      });
    }
    super((options) => this._match(options), handler);
    this._allowlist = allowlist;
    this._denylist = denylist;
  }
  _match({ url, request }) {
    if (request && request.mode !== "navigate") {
      return false;
    }
    const pathnameAndSearch = url.pathname + url.search;
    for (const regExp of this._denylist) {
      if (regExp.test(pathnameAndSearch)) {
        if (true) {
          logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL matches this denylist pattern: ${regExp.toString()}`);
        }
        return false;
      }
    }
    if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {
      if (true) {
        logger.debug(`The navigation route ${pathnameAndSearch} is being used.`);
      }
      return true;
    }
    if (true) {
      logger.log(`The navigation route ${pathnameAndSearch} is not being used, since the URL being navigated to doesn't match the allowlist.`);
    }
    return false;
  }
};

// node_modules/workbox-routing/setDefaultHandler.js
function setDefaultHandler(handler) {
  const defaultRouter = getOrCreateDefaultRouter();
  defaultRouter.setDefaultHandler(handler);
}
export {
  NavigationRoute,
  RegExpRoute,
  Route,
  Router,
  registerRoute,
  setCatchHandler,
  setDefaultHandler
};
//# sourceMappingURL=workbox-routing.js.map
