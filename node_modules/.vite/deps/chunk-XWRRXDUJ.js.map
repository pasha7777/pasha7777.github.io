{
  "version": 3,
  "sources": ["../../workbox-core/_private/cacheMatchIgnoreParams.js", "../../workbox-core/_private/Deferred.js", "../../workbox-core/models/quotaErrorCallbacks.js", "../../workbox-core/_private/executeQuotaErrorCallbacks.js", "../../workbox-core/_private/timeout.js", "../../workbox-strategies/_version.js", "../../workbox-strategies/StrategyHandler.js", "../../workbox-core/_private/cacheNames.js", "../../workbox-strategies/Strategy.js", "../../workbox-strategies/plugins/cacheOkAndOpaquePlugin.js", "../../workbox-strategies/utils/messages.js", "../../workbox-strategies/StaleWhileRevalidate.js", "../../workbox-strategies/CacheFirst.js", "../../workbox-strategies/NetworkFirst.js"],
  "sourcesContent": ["/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n", "/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n", "\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.4'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n", "/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"],
  "mappings": "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",
  "names": ["error"]
}
